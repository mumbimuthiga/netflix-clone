{"ast":null,"code":"var _jsxFileName = \"/home/mumbi/Documents/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport axios from './axios';\nimport React, { useState, useEffect } from 'react';\nimport './Row.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchURL,\n  isLarge = false\n}) {\n  _s();\n\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLarge && \"row__posterLarge\"}`,\n        src: `${base_url}${isLarge ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"euUrB0qnNgtZi5mHnBdJUwW3XSw=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/mumbi/Documents/netflix-clone/src/Row.js"],"names":["axios","React","useState","useEffect","Row","title","fetchURL","isLarge","base_url","movies","setMovies","fetchData","request","get","data","results","console","log","map","movie","isLargeRow","poster_path","backdrop_path","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,WAAP;;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,OAAO,GAAC;AAA1B,CAAb,EAA+C;AAAA;;AAC3C,QAAMC,QAAQ,GAAC,qCAAf;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACd,mBAAeQ,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAC,MAAMZ,KAAK,CAACa,GAAN,CAAUP,QAAV,CAApB;AACAI,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACR,GARQ,EAQN,CAACL,QAAD,CARM,CAAT;AASAU,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACCI,MAAM,CAACS,GAAP,CACIC,KAAD,IAAS,CACRC,UAAU,IAAID,KAAK,CAACE,WAArB,IACC,CAACD,UAAD,IAAeD,KAAK,CAACG,aAFb,kBAGT;AACA,QAAA,SAAS,EAAG,eAAcf,OAAO,IAAI,kBAAmB,EADxD;AAEA,QAAA,GAAG,EAAG,GAAEC,QAAS,GACbD,OAAO,GAACY,KAAK,CAACE,WAAP,GAAoBF,KAAK,CAACG,aACpC,EAJD;AAII,QAAA,GAAG,EAAEH,KAAK,CAACI;AAJf;AAAA;AAAA;AAAA;AAAA,cAJH;AADD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GAlCQnB,G;;KAAAA,G;AAoCT,eAAeA,GAAf","sourcesContent":["import axios from './axios';\nimport React  ,{useState,useEffect} from 'react'\n\nimport './Row.css'\n\nfunction Row({title ,fetchURL ,isLarge=false}) {\n    const base_url=\"https://image.tmdb.org/t/p/original\";\n    const [movies ,setMovies]=useState([]);\n    useEffect(()=>{\n    async function fetchData(){\n        const request=await axios.get(fetchURL);\n        setMovies(request.data.results)\n        return request;\n\n    }\n    fetchData();\n    } ,[fetchURL])\n    console.log(movies);\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n            {movies.map(\n                (movie)=>(\n                (isLargeRow && movie.poster_path) ||\n                (!isLargeRow && movie.backdrop_path)) && (\n                <img \n                className={`row__poster ${isLarge && \"row__posterLarge\"}`}\n                src={`${base_url}${\n                    isLarge?movie.poster_path :movie.backdrop_path\n                }`} alt={movie.name}></img>\n            ))}\n           \n            </div>\n            \n            \n        </div>\n    )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}